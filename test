#!/bin/bash

GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
RESET="\e[0m"

ask() {
    read -p "$1 [y/n]: " answer
    case ${answer:0:1} in
        y|Y ) return 0;;
        * ) return 1;;
    esac
}

get_manager_secret() {
    local MANAGER_CONF="/etc/asterisk/manager.conf"
    if [ -f "$MANAGER_CONF" ]; then
        # Get first non-comment line starting with 'secret' and extract value after '='
        local SECRET
        SECRET=$(grep -E '^[[:space:]]*secret[[:space:]]*=' "$MANAGER_CONF" | head -n1 | sed 's/^[[:space:]]*secret[[:space:]]*=[[:space:]]*//')
        if [ -n "$SECRET" ]; then
            echo "$SECRET"
            return 0
        fi
    fi
    return 1
}
clear

read -p "What is your AllStarLink node number? " NODE
NODE=$(echo "$NODE" | tr -cd '0-9')
if [ -z "$NODE" ]; then
  echo -e "${RED}Node number not provided or invalid. Exiting.${RESET}"
  exit 1
fi
clear

if ask "Would you like to update and upgrade system packages now?"; then
    clear
    echo -e "${GREEN}Updating system packages...${RESET}"
    apt update && apt upgrade -y
    sleep 1
fi
clear

if ask "Would you like to install Allstarlink3?"; then
    clear
    cd /tmp || exit 1
    wget -q https://repo.allstarlink.org/public/asl-apt-repos.deb12_all.deb
    export PATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin
    dpkg -i asl-apt-repos.deb12_all.deb || true
    apt update
    apt install -y asl3
    echo -e "${GREEN}Allstarlink3 installed successfully.${RESET}"
    sleep 1
    clear

    if ask "Would you like to update your password in manager.conf?"; then
        clear
        read -sp "Enter a secure password for services/dashboards: " SECURE_PASS
        echo ""
        sed -i '/^secret *=/d' /etc/asterisk/manager.conf
        sed -i "12isecret = $SECURE_PASS" /etc/asterisk/manager.conf
        echo -e "${GREEN}Updated manager.conf with your new secure password on line 12.${RESET}"
        sleep 1
    else
        echo -e "${YELLOW}manager.conf password was not modified.${RESET}"
        sleep 1
    fi
    clear
fi
clear

if ask "Would you like to install Allmon3?"; then
    clear
    cd /tmp || exit 1
    wget -q https://repo.allstarlink.org/public/asl-apt-repos.deb12_all.deb
    export PATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin
    dpkg -i asl-apt-repos.deb12_all.deb || true
    apt update
    apt install -y allmon3
    echo -e "${GREEN}Allmon3 installed successfully.${RESET}"
    sleep 1
    clear

    MANAGER_CONF="/etc/asterisk/manager.conf"
    ALLMON_INI="/etc/allmon3/allmon3.ini"

    if [ -f "$MANAGER_CONF" ]; then
        SECURE_PASS=$(grep -E '^[[:space:]]*secret[[:space:]]*=' "$MANAGER_CONF" | head -n1 | cut -d= -f2- | xargs)
    fi

    if [ -z "$NODE" ]; then
        echo -e "${RED}ERROR: NODE variable not set.${RESET}"
        sleep 1
    elif [ ! -f "$ALLMON_INI" ]; then
        echo -e "${RED}$ALLMON_INI not found. Skipping edits.${RESET}"
        sleep 1
    else
        if [ -z "$SECURE_PASS" ]; then
            echo -e "${YELLOW}Warning: no secret found in $MANAGER_CONF.${RESET}"
            sleep 1
        fi

        sed -i "/^;\[1999\]/,/^;pass=/d" "$ALLMON_INI"

        if grep -q "^\[$NODE\]" "$ALLMON_INI"; then
            sed -i "/^\[$NODE\]/,/^\[/{s/^pass=.*/pass=$SECURE_PASS/}" "$ALLMON_INI"
            echo -e "${GREEN}Updated existing [$NODE] block in $ALLMON_INI.${RESET}"
            sleep 1
        else
            {
                echo ""
                echo "[$NODE]"
                echo "host=127.0.0.1"
                echo "user=admin"
                echo "pass=$SECURE_PASS"
            } >> "$ALLMON_INI"
            echo -e "${GREEN}Added new [$NODE] block to $ALLMON_INI.${RESET}"
            sleep 1
        fi
    fi
    clear

    if ask "Would you like to create/update the Allmon3 admin user?"; then
        clear
        echo -e "${YELLOW}You will be prompted to enter a password manually.${RESET}"
        sleep 1
        allmon3-passwd admin
        sleep 1
    fi

    clear
fi
clear

if ask "Would you like to install Supermon?"; then
    clear
    cd /tmp || exit 1
    wget -q http://2577.asnode.org:43856/supermonASL_fresh_install -O supermonASL_fresh_install
    chmod +x supermonASL_fresh_install
    ./supermonASL_fresh_install || true

    wget -q http://2577.asnode.org:43856/supermonASL_latest_update -O supermonASL_latest_update
    chmod +x supermonASL_latest_update
    ./supermonASL_latest_update || true
    
    echo -e "${GREEN}Supermon installed. Configuration skipped - please configure manually.${RESET}"
    sleep 1
    clear
fi
clear

if ask "Would you like to install AllScan?"; then
    clear
    sudo apt update
    sudo apt install -y php php-sqlite3 php-curl unzip avahi-daemon asl3-tts
    cd ~ || exit 1
    rm AllScanInstallUpdate.php 2>/dev/null
    wget -q 'https://raw.githubusercontent.com/davidgsd/AllScan/main/AllScanInstallUpdate.php'
    chmod 755 AllScanInstallUpdate.php
    sudo ./AllScanInstallUpdate.php || true
    echo -e "${GREEN}AllScan installed successfully.${RESET}"
    sleep 1
    clear
fi
clear

if ask "Would you like to install DVSwitch?"; then
    clear
    cd /opt || exit 1
    wget -q http://dvswitch.org/bookworm
    chmod +x bookworm
    ./bookworm || true
    apt update
    apt install -y dvswitch-server
    echo -e "${GREEN}DVSwitch installed successfully.${RESET}"
    sleep 1
    clear
fi
clear

if ask "Would you like to install the DVSwitch Mode Switcher?"; then
    clear
    apt update && apt install -y git nodejs curl
    cd /opt || exit 1
    git clone https://github.com/firealarmss/dvswitch_mode_switcher || true
    cd dvswitch_mode_switcher || true
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
    source ~/.bashrc || true
    nvm install 18 || true
    nvm use 18 || true
    cp configs/config.example.yml configs/config.yml || true
    cp configs/tg_alias.example.yml configs/tg_alias.yml || true
    npm install yargs path || true
    npm i || true
    cp debian/dvswitch_mode_switcher.service /etc/systemd/system/dvswitch_mode_switcher.service || true
    systemctl daemon-reload
    systemctl enable dvswitch_mode_switcher.service
    systemctl start dvswitch_mode_switcher.service || true
    echo -e "${GREEN}DVSwitch Mode Switcher installed successfully.${RESET}"
    sleep 1
    clear
fi
clear

if ask "Would you like to continue to Advanced Installs?"; then
clear
    if ask "Would you like to install Analog Reflector?"; then
        clear
        cd /opt || exit 1
        apt install -y analog-reflector
        cd /opt/Analog_Reflector/ssl || true
        chmod +x mkcerts.sh
        ./mkcerts.sh || true
        echo -e "${GREEN}Analog Reflector installed successfully.${RESET}"
        sleep 1
        clear
    fi
clear

    if ask "Would you like to install WebRX?"; then
        clear
        cd /opt || exit 1
        git clone https://github.com/firealarmss/allstar2web || true
        echo -e "${GREEN}WebRX installed successfully.${RESET}"
        sleep 1
        clear
    fi
clear

    if ask "Would you like to install MMDVM Reflector?"; then
        clear
        apt update && apt upgrade -y && apt install -y git
        cd /opt || exit 1
        git clone https://github.com/firealarmss/MMDVM_Reflector || true
        cd MMDVM_Reflector/debian || true
        chmod +x install.sh
        ./install.sh || true
        systemctl disable mmdvm_reflector || true
        echo -e "${GREEN}MMDVM Reflector installed successfully.${RESET}"
        sleep 1
        clear
    fi
clear

    if ask "Would you like to install DVReflectors?"; then
        clear
        cd /opt || exit 1
        git clone https://github.com/nostar/DVReflectors || true
        echo -e "${GREEN}DVReflectors installed successfully.${RESET}"
        sleep 1
        clear
    fi
clear

    if ask "Would you like to install MMDVM_CM?"; then
        clear
        cd /opt || exit 1
        git clone https://github.com/nostar/MMDVM_CM || true
        echo -e "${GREEN}MMDVM_CM installed successfully.${RESET}"
        sleep 1
        clear
    fi
    clear

    if ask "Would you like to continue to Advanced Options?"; then
        clear
        
        if ask "Would you like to add a user to sudo without password?"; then
            clear
            apt install -y sudo
            read -p "What user do you want to add to sudo? " SUDO_USER
            if [ -n "$SUDO_USER" ]; then
                /usr/sbin/usermod -aG sudo "$SUDO_USER"
                echo "$SUDO_USER ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers.d/$SUDO_USER
                chmod 0440 /etc/sudoers.d/$SUDO_USER
                echo -e "${GREEN}User $SUDO_USER added to sudo with NOPASSWD privileges.${RESET}"
                sleep 1
            else
                echo -e "${RED}No username provided. Skipping.${RESET}"
                sleep 1
            fi
            clear
        fi
        clear

        if ask "Would you like to allow root login via SSH?"; then
            clear
            if [ -f /etc/ssh/sshd_config ]; then
                sed -i 's/^#*PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
                systemctl restart sshd 2>/dev/null || systemctl restart ssh 2>/dev/null
                echo -e "${GREEN}Root login enabled in SSH configuration.${RESET}"
                sleep 1
            else
                echo -e "${RED}/etc/ssh/sshd_config not found.${RESET}"
                sleep 1
            fi
            clear
        fi
        clear
    fi
fi
clear

if ask "Would you like to continue to KC3YWT custom installs?"; then
    clear
    mkdir -p /etc/asterisk/local
    clear

    if ask "Would you like to install Auto Connect to many?"; then
        clear
        cat > /etc/asterisk/local/autoconnect.sh <<EOF
#!/bin/bash
SCRIPT_DIR="\$(cd "\$(dirname "\$0")" && pwd)"
NODE_LIST_FILE="\$SCRIPT_DIR/autoconnectnodes.txt"
LOCAL_NODE=$NODE
ASTERISK_CMD="/usr/sbin/asterisk"
ACTION=\$1
cd /etc/asterisk/
if [[ -z "\$ACTION" ]]; then
  echo "Usage: \$0 [connect|disconnect]"
  exit 1
fi
if [[ ! -f "\$NODE_LIST_FILE" ]]; then
  echo "Error: Node list file not found at \$NODE_LIST_FILE"
  exit 1
fi
while IFS= read -r TARGET_NODE; do
  if [[ ! "\$TARGET_NODE" =~ ^[0-9]+$ ]]; then
    continue
  fi
  if [[ "\$ACTION" == "connect" ]]; then
    \$ASTERISK_CMD -rx "rpt fun \$LOCAL_NODE *3\$TARGET_NODE"
    echo "Connected to \$TARGET_NODE"
  elif [[ "\$ACTION" == "disconnect" ]]; then
    \$ASTERISK_CMD -rx "rpt fun \$LOCAL_NODE *1\$TARGET_NODE"
    echo "Disconnected from \$TARGET_NODE"
  else
    echo "Invalid action: \$ACTION"
    exit 1
  fi
done < "\$NODE_LIST_FILE"
EOF
        chmod +x /etc/asterisk/local/autoconnect.sh
        touch /etc/asterisk/local/autoconnectnodes.txt
        echo -e "${GREEN}Auto Connect script installed.${RESET}"
        sleep 1
        clear
    fi
    clear

    if ask "Would you like to install Easy Connect?"; then
        clear
        cat > /etc/asterisk/local/nodeconnect.sh <<EOF
#!/bin/bash
LOCAL_NODE=$NODE
ACTION=\$1
TARGET_NODE=\$2
cd /etc/asterisk/
if [[ -z "\$ACTION" || -z "\$TARGET_NODE" ]]; then
  echo "Usage: \$0 [connect|disconnect] [target_node_number]"
  exit 1
fi
if ! [[ "\$TARGET_NODE" =~ ^[0-9]+$ && "\$TARGET_NODE" -ge 1000 && "\$TARGET_NODE" -le 1000000 ]]; then
  echo "Error: Target node must be a number between 1000 and 1000000"
  exit 1
fi
case "\$ACTION" in
  connect)
    /usr/sbin/asterisk -rx "rpt fun \$LOCAL_NODE *3\$TARGET_NODE"
    ;;
  disconnect)
    /usr/sbin/asterisk -rx "rpt fun \$LOCAL_NODE *1\$TARGET_NODE"
    ;;
  *)
    echo "Error: Invalid action. Use 'connect' or 'disconnect'"
    exit 1
    ;;
esac
EOF
        chmod +x /etc/asterisk/local/nodeconnect.sh
        echo -e "${GREEN}Easy Connect script installed.${RESET}"
        sleep 1
        clear
    fi
    clear
fi
clear

if ask "Would you like to update and upgrade system packages now?"; then
    echo -e "${GREEN}Updating system packages...${RESET}"
    apt update && apt upgrade -y
    clear
fi

if ask "Would you like to remove the auto install files?"; then
    rm -f /opt/bookworm
    rm -rf /opt/asl3-autoinstall
    echo -e "${GREEN}Auto install files removed.${RESET}"
    clear
fi

cd /opt || true
echo -e "${GREEN}Installation complete!${RESET}"

# Ask to reboot
if ask "Would you like to reboot the system now?"; then
    echo -e "${YELLOW}Rebooting...${RESET}"
    sudo reboot
fi
