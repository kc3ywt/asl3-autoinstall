#!/bin/bash

GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
RESET="\e[0m"

ask() {
    read -p "$1 [y/n]: " answer
    case ${answer:0:1} in
        y|Y ) return 0;;
        * ) return 1;;
    esac
}

get_manager_secret() {
    local MANAGER_CONF="/etc/asterisk/manager.conf"
    if [ -f "$MANAGER_CONF" ]; then
        # Get first non-comment line starting with 'secret' and extract value after '='
        local SECRET
        SECRET=$(grep -E '^[[:space:]]*secret[[:space:]]*=' "$MANAGER_CONF" | head -n1 | sed 's/^[[:space:]]*secret[[:space:]]*=[[:space:]]*//')
        if [ -n "$SECRET" ]; then
            echo "$SECRET"
            return 0
        fi
    fi
    return 1
}
clear

read -p "What is your AllStarLink node number? " NODE
NODE=$(echo "$NODE" | tr -cd '0-9')
if [ -z "$NODE" ]; then
  echo -e "${RED}Node number not provided or invalid. Exiting.${RESET}"
  exit 1
fi
clear

if ask "Would you like to update and upgrade system packages now?"; then
    echo -e "${GREEN}Updating system packages...${RESET}"
    apt update && apt upgrade -y
fi
clear

if ask "Would you like to install Allstarlink3?"; then
    cd /tmp || exit 1
    wget -q https://repo.allstarlink.org/public/asl-apt-repos.deb12_all.deb
    export PATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin
    dpkg -i asl-apt-repos.deb12_all.deb || true
    apt update
    apt install -y asl3
    clear

    if ask "Would you like to update your password in manager.conf?"; then
        read -sp "Enter a secure password for services/dashboards: " SECURE_PASS
        echo ""
        sed -i '/^secret *=/d' /etc/asterisk/manager.conf
        sed -i "12isecret = $SECURE_PASS" /etc/asterisk/manager.conf
        echo -e "${GREEN}Updated manager.conf with your new secure password on line 12.${RESET}"
    else
        echo -e "${YELLOW}manager.conf password was not modified.${RESET}"
    fi
else
    echo -e "${RED}/etc/asterisk/manager.conf not found!${RESET}"
fi

clear

    if ask "Would you like to install Allmon3?"; then
        cd /tmp || exit 1
        wget -q https://repo.allstarlink.org/public/asl-apt-repos.deb12_all.deb
        export PATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin
        dpkg -i asl-apt-repos.deb12_all.deb || true
        apt update -y
        apt install -y allmon3
        clear
    
        MANAGER_CONF="/etc/asterisk/manager.conf"
        ALLMON_INI="/etc/allmon3/allmon3.ini"
    
        if [ -f "$MANAGER_CONF" ]; then
            SECURE_PASS=$(grep -E '^[[:space:]]*secret[[:space:]]*=' "$MANAGER_CONF" | head -n1 | cut -d= -f2- | xargs)
        fi
    
        if [ -z "$NODE" ]; then
            echo -e "${RED}ERROR: NODE variable not set.${RESET}"
        elif [ ! -f "$ALLMON_INI" ]; then
            echo -e "${RED}$ALLMON_INI not found. Skipping edits.${RESET}"
        else
            if [ -z "$SECURE_PASS" ]; then
                echo -e "${YELLOW}Warning: no secret found in $MANAGER_CONF.${RESET}"
            fi
    
            sed -i "/^;\[1999\]/,/^;pass=/d" "$ALLMON_INI"
    
            if grep -q "^\[$NODE\]" "$ALLMON_INI"; then
                sed -i "/^\[$NODE\]/,/^\[/{s/^pass=.*/pass=$SECURE_PASS/}" "$ALLMON_INI"
                echo -e "${GREEN}Updated existing [$NODE] block in $ALLMON_INI.${RESET}"
            else
                {
                    echo ""
                    echo "[$NODE]"
                    echo "host=127.0.0.1"
                    echo "user=admin"
                    echo "pass=$SECURE_PASS"
                } >> "$ALLMON_INI"
                echo -e "${GREEN}Added new [$NODE] block to $ALLMON_INI.${RESET}"
            fi
        fi
        clear

        if ask "Would you like to create/update the Allmon3 admin user?"; then
            echo -e "${YELLOW}You will be prompted to enter a password manually.${RESET}"
            allmon3-passwd admin
        fi
    
        clear
    fi
clear

if ask "Would you like to install Supermon?"; then
    cd /tmp || exit 1
    wget -q http://2577.asnode.org:43856/supermonASL_fresh_install -O supermonASL_fresh_install
    chmod +x supermonASL_fresh_install
    ./supermonASL_fresh_install || true

    wget -q http://2577.asnode.org:43856/supermonASL_latest_update -O supermonASL_latest_update
    chmod +x supermonASL_latest_update
    ./supermonASL_latest_update || true
    clear

    MANAGER_CONF="/etc/asterisk/manager.conf"
    SUPER_ALLMON="/var/www/html/supermon/allmon.ini"
    GLOBAL_INC="/var/www/html/supermon/global.inc"

    if [ -f "$MANAGER_CONF" ]; then
        SECURE_PASS=$(grep -E '^[[:space:]]*secret[[:space:]]*=' "$MANAGER_CONF" | head -n1 | cut -d= -f2- | xargs)
    fi

    if [ -z "$NODE" ]; then
        echo -e "${RED}ERROR: NODE variable not set.${RESET}"
    elif [ ! -f "$SUPER_ALLMON" ]; then
        echo -e "${RED}$SUPER_ALLMON not found. Skipping edits.${RESET}"
    else
        if [ -z "$SECURE_PASS" ]; then
            echo -e "${YELLOW}Warning: no secret found in $MANAGER_CONF.${RESET}"
        fi

        # Update allmon.ini
        perl -0777 -pe 's/^(nodes\s*=\s*).*$/${1} '"$NODE"'/m' -i "$SUPER_ALLMON"

        perl -0777 -pe '
            $NODE='"$NODE"';
            $PASS="'"$SECURE_PASS"'";
            $count=0;
            s/(\[(\d+)\]\s*(?:(?:(?!^\[).)*?\n)(?:(?:(?!^\[).)*?user\s*=\s*admin.*?\n)(?:(?:(?!^\[).)*?passwd\s*=\s*)([^\r\n]*))/
              do {
                  $count++;
                  if($count==1) {
                      $block=$1;
                      $block=~s/^\[(\d+)\]/"[".$NODE."]"/m;
                      $block=~s/(passwd\s*=\s*)([^\r\n]*)/$1.$PASS/;
                      $block;
                  } else { $1 }
              }
              /sexm' -i "$SUPER_ALLMON" 2>/dev/null || true

        perl -0777 -pe 's#(url\s*=\s*".*/sm_lsnodes\?node=)(\d+)("#${1}'"$NODE"'${3})#m' -i "$SUPER_ALLMON"

        perl -0777 -ne '
            $f = $_;
            @blocks = ($f =~ /(\[(\d+)\][^\[]*?host\s*=\s*127\.0\.0\.1:5038[^\[]*?)(?=(?:\n\[|$))/g);
            if(@blocks >= 2) {
                $first = $blocks[0];
                $second = $blocks[1];
                $escaped_second = quotemeta($second);
                $commented = $second;
                $commented =~ s/^/;/mg;
                $f =~ s/$escaped_second/$commented/;
                print $f;
            } else { print $f }
        ' -i "$SUPER_ALLMON" 2>/dev/null || true

        echo -e "${GREEN}Edited $SUPER_ALLMON (nodes list updated, first block set, second block commented, LsNodes URL updated).${RESET}"
    fi
    clear

    if [ -f "$GLOBAL_INC" ]; then
        read -p "What is your Amateur Radio Callsign? " CALLSIGN
        read -p "What is your Name? " PERSON_NAME
        read -p "What is your location? " LOCATION
        read -p "What is your zipcode? " ZIPCODE

        perl -0777 -pe '
            s/\$CALL\s*=\s*"[^"]*";/\$CALL = "'"$CALLSIGN"'";/m;
            s/\$NAME\s*=\s*"[^"]*";/\$NAME = "'"$PERSON_NAME"'";/m;
            s/\$LOCATION\s*=\s*"[^"]*";/\$LOCATION = "'"$LOCATION"'";/m;
            s/\$TITLE2\s*=\s*"[^"]*";/\$TITLE2 = "'"$NODE"' Cloud Server";/m;
            s/\$LOCALZIP\s*=\s*"[^"]*";/\$LOCALZIP = "'"$ZIPCODE"'";/m;
        ' -i "$GLOBAL_INC" 2>/dev/null || true

        echo -e "${GREEN}Updated $GLOBAL_INC with callsign, name, location, zip, and node title.${RESET}"
    else
        echo -e "${RED}$GLOBAL_INC not found. Skipping global.inc edits.${RESET}"
    fi
    clear

    if ask "Would you like to create/update the Supermon admin user?"; then
        echo -e "${YELLOW}You will be prompted to enter a password manually.${RESET}"
        htpasswd -cB /var/www/html/supermon/.htpasswd admin
    fi

    clear
fi
clear

if ask "Would you like to install AllScan?"; then
    sudo apt update; sudo apt install php php-sqlite3 php-curl unzip avahi-daemon asl3-tts -y
    cd ~ || exit 1
    rm AllScanInstallUpdate.php 2>/dev/null
    wget -q 'https://raw.githubusercontent.com/davidgsd/AllScan/main/AllScanInstallUpdate.php'
    chmod 755 AllScanInstallUpdate.php
    sudo ./AllScanInstallUpdate.php || true
    clear
fi
clear

if ask "Would you like to install DVSwitch?"; then
    cd /opt || exit 1
    wget -q http://dvswitch.org/bookworm
    chmod +x bookworm
    ./bookworm || true
    apt update
    apt install -y dvswitch-server
    clear
fi
clear

if ask "Would you like to install the DVSwitch Mode Switcher?"; then
    apt update && apt install -y git nodejs curl
    cd /opt || exit 1
    git clone https://github.com/firealarmss/dvswitch_mode_switcher || true
    cd dvswitch_mode_switcher || true
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \ . "$NVM_DIR/nvm.sh"
    source ~/.bashrc || true
    nvm install 18 || true
    nvm use 18 || true
    cp configs/config.example.yml configs/config.yml || true
    cp configs/tg_alias.example.yml configs/tg_alias.yml || true
    npm install yargs path || true
    npm i || true
    cp debian/dvswitch_mode_switcher.service /etc/systemd/system/dvswitch_mode_switcher.service || true
    systemctl daemon-reload
    systemctl enable dvswitch_mode_switcher.service
    systemctl start dvswitch_mode_switcher.service || true
    clear
fi
clear

if ask "Would you like to continue to Advanced Installs?"; then
clear
    if ask "Would you like to install Analog Reflector?"; then
        cd /opt || exit 1
        apt install -y analog-reflector
        cd /opt/Analog_Reflector/ssl || true
        chmod +x mkcerts.sh
        ./mkcerts.sh || true
        clear
    fi
clear

    if ask "Would you like to install WebRX?"; then
        cd /opt || exit 1
        git clone https://github.com/firealarmss/allstar2web || true
        clear
    fi
clear

    if ask "Would you like to install MMDVM Reflector?"; then
        apt update && apt upgrade -y && apt install -y git
        cd /opt || exit 1
        git clone https://github.com/firealarmss/MMDVM_Reflector || true
        cd MMDVM_Reflector/debian || true
        chmod +x install.sh
        ./install.sh || true
        systemctl disable mmdvm_reflector || true
        clear
    fi
clear

    if ask "Would you like to install DVReflectors?"; then
        cd /opt || exit 1
        git clone https://github.com/nostar/DVReflectors || true
        clear
    fi
clear

    if ask "Would you like to install MMDVM_CM?"; then
        cd /opt || exit 1
        git clone https://github.com/nostar/MMDVM_CM || true
        clear
    fi
    clear
fi
clear

if ask "Would you like to continue to KC3YWT custom installs?"; then
    mkdir -p /etc/asterisk/local
    clear
fi

if ask "Would you like to install Auto Connect to many?"; then
    cat > /etc/asterisk/local/autoconnect.sh <<EOF
#!/bin/bash
SCRIPT_DIR="\$(cd "\$(dirname "\$0")" && pwd)"
NODE_LIST_FILE="\$SCRIPT_DIR/autoconnectnodes.txt"
LOCAL_NODE=$NODE
ASTERISK_CMD="/usr/sbin/asterisk"
ACTION=\$1
cd /etc/asterisk/
if [[ -z "\$ACTION" ]]; then
  echo "Usage: \$0 [connect|disconnect]"
  exit 1
fi
if [[ ! -f "\$NODE_LIST_FILE" ]]; then
  echo "Error: Node list file not found at \$NODE_LIST_FILE"
  exit 1
fi
while IFS= read -r TARGET_NODE; do
  if [[ ! "\$TARGET_NODE" =~ ^[0-9]+$ ]]; then
    continue
  fi
  if [[ "\$ACTION" == "connect" ]]; then
    \$ASTERISK_CMD -rx "rpt fun \$LOCAL_NODE *3\$TARGET_NODE"
    echo "Connected to \$TARGET_NODE"
  elif [[ "\$ACTION" == "disconnect" ]]; then
    \$ASTERISK_CMD -rx "rpt fun \$LOCAL_NODE *1\$TARGET_NODE"
    echo "Disconnected from \$TARGET_NODE"
  else
    echo "Invalid action: \$ACTION"
    exit 1
  fi
done < "\$NODE_LIST_FILE"
EOF
    chmod +x /etc/asterisk/local/autoconnect.sh
    touch /etc/asterisk/local/autoconnectnodes.txt
    clear
fi
clear

if ask "Would you like to install Easy Connect?"; then
    cat > /etc/asterisk/local/nodeconnect.sh <<EOF
#!/bin/bash
LOCAL_NODE=$NODE
ACTION=\$1
TARGET_NODE=\$2
cd /etc/asterisk/
if [[ -z "\$ACTION" || -z "\$TARGET_NODE" ]]; then
  echo "Usage: \$0 [connect|disconnect] [target_node_number]"
  exit 1
fi
if ! [[ "\$TARGET_NODE" =~ ^[0-9]+$ && "\$TARGET_NODE" -ge 1000 && "\$TARGET_NODE" -le 1000000 ]]; then
  echo "Error: Target node must be a number between 1000 and 1000000"
  exit 1
fi
case "\$ACTION" in
  connect)
    /usr/sbin/asterisk -rx "rpt fun \$LOCAL_NODE *3\$TARGET_NODE"
    ;;
  disconnect)
    /usr/sbin/asterisk -rx "rpt fun \$LOCAL_NODE *1\$TARGET_NODE"
    ;;
  *)
    echo "Error: Invalid action. Use 'connect' or 'disconnect'"
    exit 1
    ;;
esac
EOF
    chmod +x /etc/asterisk/local/nodeconnect.sh
    clear
fi

if ask "Would you like to update and upgrade system packages now?"; then
    echo -e "${GREEN}Updating system packages...${RESET}"
    apt update && apt upgrade -y
    clear
fi

rm -f /opt/bookworm
rm -rf /opt/asl3-autoinstall
cd /opt || true
clear
echo -e "${GREEN}Installation complete!${RESET}"

# Ask to reboot
if ask "Would you like to reboot the system now?"; then
    echo -e "${YELLOW}Rebooting...${RESET}"
    sudo reboot
fi
